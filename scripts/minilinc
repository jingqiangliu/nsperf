#!/usr/bin/env python2

import argparse
import random
import os

import mininet
import mininet.net
import mininet.topo
import mininet.node
import mininet.log
import mininet.cli


class StarTopo(mininet.topo.Topo):
    """ Simple star topology with one
        Linc-Switch and three hosts.
    """

    def __init__(self, **kwargs):
        super(StarTopo, self).__init__(**kwargs)

        s1 = self.addSwitch("s1", protocols="OpenFlow13")

        h1 = self.addHost("h1", ip="10.0.0.1")
        h2 = self.addHost("h2", ip="10.0.0.2")
        h3 = self.addHost("h3", ip="10.0.0.3")

        self.addLink(s1, h1, port1=1)
        self.addLink(s1, h2, port1=2)
        self.addLink(s1, h3, port1=3)


def set_traffic_generators(network):
    """ Run neverending nsperf to produce packet-in
        messages to controller.
    """
    cmd = ("nsperf -t PTR "
           "--local-address 10.0.0.{0} "
           "--remote-address 10.0.0.{1} &")

    def hostname(host):
        return host.name.replace("h", "")

    hostnames = set(map(hostname, network.hosts))

    for host in network.hosts:
        name = hostname(host)
        available_hostnames = hostnames - set(name)
        remote_hostname = random.choice(list(available_hostnames))
        host.sendCmd(cmd.format(name, remote_hostname))


def main():
    """ Build topology and run cli.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-a",
        "--address",
        type=str,
        default="127.0.0.1",
        help="IP address of the remote OpenFlow controller")

    parser.add_argument(
        "-p",
        "--port",
        type=int,
        default=6633,
        help="Port number of the remote OpenFlow controller")

    args = parser.parse_args()

    mininet.log.setLogLevel("info")

    net = mininet.net.Mininet(
        topo=StarTopo(),
        controller=None)

    net.addController(
        ip=args.address,
        port=args.port,
        controller=mininet.node.RemoteController)

    set_traffic_generators(net)

    net.start()
    os.system("ovs-vsctl set bridge s1 protocols=OpenFlow13")

    mininet.cli.CLI(net)
    net.stop()


if __name__ == "__main__":
    main()
